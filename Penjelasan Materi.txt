Playlist WPU - Javascript Lanjutan (Advance Javascript)

#1 Javascript Lanjutan - 1.1 Object

Membuat Object Pada Javascript
> Object Literal
> Function Declaration
> Constructor Function (keyword new)
> Object.create()





#2 Javascript Lanjutan - 1.2 Object

Object.create()

Contoh Kasus : 
                const methodMahasiswa = {
                    makan: function(porsi) {
                        this.energy = this.energy + porsi;
                        console.log(`Selamat Makan ${this.nama}!\nEnergy kamu meningkat sebesar ${porsi}%`);
                    },
                    main: function(jam){
                        this.energy = this.energy - jam;
                        console.log(`Selamat Bermain ${this.nama}!\nEnergy kamu akan berkurang sebesar ${jam}%`);
                    },
                    tidur: function(jam){
                        this.energy = this.energy * jam;
                        console.log(`Selamat Tidur ${this.nama}!\nEnergy kamu akan bertambah sebesar ${jam}%`);
                    }
                };

                function Mahasiswa(nama, energy) {
                    // Memanggil parentnya yang berisi method
                    let mahasiswa = Object.create(methodMahasiswa);
                    mahasiswa.nama = nama;
                    mahasiswa.energy = energy;

                    return mahasiswa;
                }

                // intansiasi
                // **Saat melakukan instansiasi 2 method diatas akan tetap dibuat baik dipakai atau tidaknya.
                // **Butuhnya Mahasiswa, Namun ini membuat 2 object 
                let Izuchii = Mahasiswa('Izuchii', 10)
                let Luthfi = Mahasiswa('Luthfi Nur Ramadhan', 10)





#3 JavaScript Lanjutan - Prototype

Object.create() = itu seperti memanggil class lain yang dijadikan sebagai parentnya.
jika menggunakan construct function maka sebenarnya sudah secara otomatis memanggil Object.create()
let this = Object.create(Mahasiswa.prototype);

Sebenernya constructor function itu sudah memiliki parent yaitu prototype.





#4 JavaScript Lanjutan - 2.1 Execution Context, Hoisting & Scope

2 Fase pada Execution Context (saat program dijalankan)
1. Fase Creation
2. Fase Execution





#5 JavaScript Lanjutan - 2.2 Closure

Apa itu Closuere ?? 
"Closure merupakan kombinasi antara function dan lingkungan leksikal (lexical scope) di dalam function tersebut".
-MDN

"Closure adalah sebuah function ketika memiliki akses ke parent scope-nya, meskipun parent scope-nya sudah selesai dieksekusi."
-W3School

Lexical Scope

    function init () {  
        let nama = "Izuchii";           // local variabel

        function tampilNama() {         // inner function (closure)
            console.log(nama);          // akses ke parent variabel
        }
        tampilNama();
    }
    init();

Alasan menggunakan Closure ?
Untuk membuat Function Factories,
Untuk membuat private method,





#6 JavaScript Lanjutan - 3.1 Arrow Function

Function Exspression
    let tampilPesan = function (nama) {
        alert ('halo' + nama);
    }

    tampilPesan("Izuchii");

Arrow Function, "Bentuk lain yang lebih ringkas dari Function Exspression."

    let tampilPesan = (nama) => {
        alert('halo'+ nama);
    }

    tampilPesan("Izuchii");


Map : memetakkn sebuah function ke dalam array